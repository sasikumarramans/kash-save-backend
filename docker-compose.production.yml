version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: kash-save-prod-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kash_save_prod_db}
      POSTGRES_USER: ${POSTGRES_USER:-kash_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./init-prod.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kash-save-prod-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kash_prod_user} -d ${POSTGRES_DB:-kash_save_prod_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: kash-save-prod-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6381:6379"
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - kash-save-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: kash-save-prod-app
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-kash_save_prod_db}
      DB_USERNAME: ${POSTGRES_USER:-kash_prod_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      SSL_ENABLED: true
      SSL_KEYSTORE_PATH: /app/ssl/keystore.p12
      SSL_KEYSTORE_PASSWORD: ${SSL_KEYSTORE_PASSWORD}
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kash-save-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - prod_uploads:/app/uploads
      - prod_logs:/app/logs
      - ./ssl:/app/ssl:ro
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  nginx:
    image: nginx:alpine
    container_name: kash-save-prod-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/production:/etc/nginx/ssl:ro
      - prod_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - kash-save-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  prometheus:
    image: prom/prometheus:latest
    container_name: kash-save-prod-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - kash-save-prod-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: kash-save-prod-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kash-save-prod-network
    restart: always

volumes:
  postgres_prod_data:
  redis_prod_data:
  prod_uploads:
  prod_logs:
  prometheus_data:
  grafana_data:

networks:
  kash-save-prod-network:
    driver: bridge