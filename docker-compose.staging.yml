services:
  postgres:
    image: postgres:15-alpine
    container_name: kash-save-staging-postgres
    environment:
      POSTGRES_DB: kash_save_staging_db
      POSTGRES_USER: kash_staging_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-StaG1ng_P@ssw0rd_2024!}
    ports:
      - "5434:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - kash-save-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kash_staging_user -d kash_save_staging_db && psql -U kash_staging_user -d kash_save_staging_db -c 'SELECT 1;'"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 90s

  redis:
    image: redis:7-alpine
    container_name: kash-save-staging-redis
    ports:
      - "6381:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - kash-save-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile.staging
    container_name: kash-save-staging-app
    environment:
      SPRING_PROFILES_ACTIVE: staging
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kash_save_staging_db
      DB_USERNAME: kash_staging_user
      DB_PASSWORD: ${DB_PASSWORD:-StaG1ng_P@ssw0rd_2024!}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-StaG1ng_P@ssw0rd_2024!}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-Red1s_StaG1ng_2024!}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-staging-super-secret-key}
      CLIENT_TOKEN: ${CLIENT_TOKEN:-Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      MAIL_USERNAME: ${MAIL_USERNAME:-staging@kashsave.com}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-staging_mail_password}
      STRIPE_PUBLIC_KEY_STAGING: ${STRIPE_PUBLIC_KEY_STAGING:-pk_test_staging}
      STRIPE_SECRET_KEY_STAGING: ${STRIPE_SECRET_KEY_STAGING:-sk_test_staging}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://staging.kashsave.com}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-5MB}
      UPLOAD_PATH: ${UPLOAD_PATH:-/app/uploads}
      WEBHOOK_URL: ${WEBHOOK_URL:-https://staging-webhook.kashsave.com}
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:-200}
    ports:
      - "8082:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - kash-save-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    volumes:
      - staging_uploads:/app/uploads
      - staging_logs:/app/logs

volumes:
  postgres_staging_data:
  redis_staging_data:
  staging_uploads:
  staging_logs:

networks:
  kash-save-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16  # Changed from 172.20.0.0/16 to avoid conflict